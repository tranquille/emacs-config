* Apperance
** Theme
#+begin_src emacs-lisp
(use-package spacemacs-theme
    :ensure t
    :defer t
    :init (load-theme 'spacemacs-dark t))
#+end_src
** Look & Feel
*** Remove startup screen
We use an actual replacement for it, keep reading or head directly to [[dashboard]]
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
*** disable menu 
If you like using any of those, change -1 to 1.
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC
*** disable bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC
*** Set UTF-8 Encoding
#+BEGIN_SRC emacs-lisp
(setq local-encoding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC
*** Highlight current line
#+BEGIN_SRC emacs-lisp
(when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
#+END_SRC
*** Pretty symbols
Changes =lambda= to an actual symbol and a few others as well, only in the GUI version though.
#+BEGIN_SRC emacs-lisp
  (when window-system
    (use-package pretty-mode
      :ensure t
      :config
      (global-pretty-mode t)))

#+END_SRC
* Mac OS related
** fix some keys
On mac os the keybindgs a somehow messed up, without this settings we are not able to type a couple characters like braces. 
#+BEGIN_SRC emacs-lisp
(setq mac-right-option-modifier nil)
#+END_SRC
* Functionality
** Disable backups and auto-saves
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+END_SRC
** Change yes-or-no questions into y-or-n querstions
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Async
Lets us use asynchronous processes wherever possible, pretty useful...
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :init (dired-async-mode 1))
#+END_SRC
* Mac OS related
** fix some keys
On mac os the keybindgs a somehow messed up, without this settings we are not able to type a couple characters like braces. 
#+BEGIN_SRC emacs-lisp
(setq mac-right-option-modifier nil)
#+END_SRC
* Git integration
Countless are the times where I opened ansi-term to use =git= on something.
These times are also something that I'd prefer stay in the past, since =magit= is
great. It's easy and intuitive to use, shows its options at a keypress and much more.
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC

