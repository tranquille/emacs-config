#+STARTUP: overview
#+TITLE: Bart's Emacs Config
#+CREATOR: Bart
#+LANGUAGE: en
#+OPTIONS: num:nil
#+ATTR_HTML: :style margin-left: auto; margin-right: auto;
* Theme
#+begin_src emacs-lisp
(use-package spacemacs-theme
    :defer t
    :init (load-theme 'spacemacs-dark t))
#+end_src
* Basic Interface Settings
These are settings that do not depends on packages and are build-in
enhancements to the UI.
** Look & Feel
*** Remove startup screen
We use an actual replacement for it, keep reading or head directly to [[Dashboard][dashboard]]
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
*** disable menu 
If you like using any of those, change -1 to 1.
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC
*** disable bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC
*** disable dialog boxes
#+BEGIN_SRC emacs-lisp
  (setq use-dialog-box nil)
#+END_SRC
*** wrap text nice
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode 1)
  (setq fill-column 120)
#+END_SRC
*** Set UTF-8 Encoding
#+BEGIN_SRC emacs-lisp
(setq local-encoding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC
*** Highlight current line
#+BEGIN_SRC emacs-lisp
(when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
#+END_SRC
*** Pretty symbols
Changes =lambda= to an actual symbol and a few others as well, only in the GUI version though.
#+BEGIN_SRC emacs-lisp
  (when window-system
    (use-package pretty-mode
      :config
      (global-pretty-mode t)))

#+END_SRC
** Mac OS related
*** fix some keys
On mac os the keybindgs a somehow messed up, without this settings we are not able to type a couple characters like braces. 
#+BEGIN_SRC emacs-lisp
(setq mac-right-option-modifier nil)
#+END_SRC
** Functionality
*** Disable backups and auto-saves
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+END_SRC
*** Change yes-or-no questions into y-or-n querstions
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Async
Lets us use asynchronous processes wherever possible, pretty useful...
#+BEGIN_SRC emacs-lisp
  (use-package async
    :init (dired-async-mode 1))
#+END_SRC
** Default browser
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "firefox")
#+END_SRC
* Projectile
Projectile is an awesome project manager, mostly because it recognizes
directories with a =.git= directory as projects and helps you manage them accordingly.
** Enable projectile globally
This makes sure that everything can be a project.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :init
    (projectile-mode 1))
#+END_SRC
** Let projectile call make
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") 'projectile-compile-project)

#+END_SRC
* Dashboard
This is your new startup screen, together with projectile it works in unison and provides
you with a quick look into your latest projects and files. Change the welcome message to 
whatever string you want and change the numbers to suit your liking, I find 5 to be enough.
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 5)
			    (projects . 5)))
    (setq dashboard-banner-logo-title ""))
#+END_SRC
* Modeline
The modeline is the heart of emacs, it offers information at all times, it’s persistent and verbose enough to gain a full understanding of modes and states you are in.
Due to the fact that we attempt to use emacs as a desktop environment replacement, and external bar showing the time, the battery percentage and more system info would be great to have. I have however abandoned polybar in favor of a heavily modified modeline, this offers me more space on the screen and better integration.
One modeline-related setting that is missing and is instead placed at the bottom is [[diminish]].
** Spaceline!
This enables spaceline, it looks better and works very well.
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :config
    (require 'spaceline-config)
    (setq spaceline-buffer-encoding-abbrev-p nil)
    (setq spaceline-line-column-p nil)
    (setq spaceline-line-p nil)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC
** No separator
#+BEGIN_SRC emacs-lisp
  (setq powerline-default-separator nil)
#+END_SRC
** Cursor position
Show the current line and column for your corsor. We are not going to have =relative-linum-mode= in every major mode, so this is useful.
#+BEGIN_SRC emacs-lisp
  (setq line-number-mode t)
  (setq column-number-mode t)
#+END_SRC
** Clock
If you prefer the 12hr-format, change the variable to =nil= instead of =t=.
*** Time format
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (setq display-time-format "%H:%M - %d %B %Y")
#+END_SRC
*** Enabling the clock
#+BEGIN_SRC emacs-lisp
(display-time-mode 1)
#+END_SRC
** Battery indicator
#+BEGIN_SRC emacs-lisp
  (use-package fancy-battery
    :config
    (setq fancy-battery-show-percentage t)
    (setq battery-update-interval 30)
    (if window-system
	(fancy-battery-mode)
      (display-battery-mode)))

#+END_SRC
* The terminal
** Default shell should be zsh
I don’t know why this is a thing, but asking me what shell to launch every single time I open a terminal makes me want to slap babies, this gets rid of it. This goes without saying but you can replace bash with your shell of choice.
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/usr/local/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
** Easy to remember keybinding
Super + Enter to launch a new terminal.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<s-return>") 'ansi-term)

#+END_SRC
* Moving around emacs
One of the most important things about a text editor is how efficient you manage
to be when using it, how much time do basic tasks take you and so on and so forth.
One of those tasks is moving around files and buffers, whatever you may use emacs for
you /will/ be jumping around buffers like it's serious business, the following
set of enhancements aims to make it easier.

As a great emacs user once said:

#+BEGIN_QUOTE
Do me the favor, do me the biggest favor, matter of fact do yourself the biggest favor and integrate those into your workflow.
#+END_QUOTE

** a prerequisite for others packages
#+BEGIN_SRC emacs-lisp
;;  (use-package ivy)
#+END_SRC
** scrolling and why does the screen move
I don't know to be honest, but this little bit of code makes scrolling with emacs a lot nicer.
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** which-key and why I love emacs
In order to use emacs, you don't need to know how to use emacs.
It's self documenting, and coupled with this insanely useful package, it's even easier.
In short, after you start the input of a command and stop, pondering what key must follow,
it will automatically open a non-intrusive buffer at the bottom of the screen offering
you suggestions for completing the command, that's it, nothing else.

It's beautiful
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
      (which-key-mode))
#+END_SRC

** windows,panes and why I hate other-window
Some of us have large displays, others have tiny netbook screens, but regardless of your hardware
you probably use more than 2 panes/windows at times, cycling through all of them with
=C-c o= is annoying to say the least, it's a lot of keystrokes and takes time, time you could spend doing something more productive.

*** switch-window
This magnificent package takes care of this issue.
It's unnoticeable if you have <3 panes open, but with 3 or more, upon pressing =C-x o=
you will notice how your buffers turn a solid color and each buffer is asigned a letter
(the list below shows the letters, you can modify them to suit your liking), upon pressing
a letter asigned to a window, your will be taken to said window, easy to remember, quick to use
and most importantly, it annihilates a big issue I had with emacs. An alternative is =ace-window=,
however by default it also changes the behaviour of =C-x o= even if only 2 windows are open,
this is bad, it also works less well with =exwm= for some reason.
#+BEGIN_SRC emacs-lisp
(use-package switch-window
  :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
        '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
  :bind
    ([remap other-window] . switch-window))
#+END_SRC
*** Following window splits
After you split a window, your focus remains in the previous one.
This annoyed me so much I wrote these two, they take care of it.
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** buffers and why I hate list-buffers
Another big thing is, buffers. If you use emacs, you use buffers, everyone loves them.
Having many buffers is useful, but can be tedious to work with, let us see how we can improve it.

*** Always murder current buffer
Doing =C-x k= should kill the current buffer at all times, we have =ibuffer= for more sophisticated thing.
#+BEGIN_SRC emacs-lisp
  (defun kill-current-buffer ()
    "Kills the current buffer."
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC

*** Kill buffers without asking for confirmation
Unless you have the muscle memory, I recommend omitting this bit, as you may lose progress for no reason when working.
#+BEGIN_SRC emacs-lisp
(setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
#+END_SRC

*** Turn switch-to-buffer into ibuffer
I don't understand how ibuffer isn't the default option by now.
It's vastly superior in terms of ergonomics and functionality, you can delete buffers, rename buffer, move buffers, organize buffers etc.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC
**** expert-mode
If you feel like you know how ibuffer works and need not to be asked for confirmation after every serious command, enable this as follows.
#+BEGIN_SRC emacs-lisp
(setq ibuffer-expert nil)
#+END_SRC
*** close-all-buffers
It's one of those things where I genuinely have to wonder why there is no built in functionality for it.
Once in a blue moon I need to kill all buffers, and having ~150 of them open would mean I'd need to spend a few too many
seconds doing this than I'd like, here's a solution.

This can be invoked using =C-M-s-k=. This keybinding makes sure you don't hit it unless you really want to.
#+BEGIN_SRC emacs-lisp
  (defun close-all-buffers ()
    "Kill all buffers without regard for their origin."
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'close-all-buffers)
#+END_SRC
** line numbers and programming
Every now and then all of us feel the urge to be productive and write some code. In the event that this happens, the following bit of configuration makes sure that we have access to relative line numbering in programming-related modes. I highly recommend not enabling linum-relative-mode globally, as it messed up something like ansi-term for instance.
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :diminish linum-relative-mode
    :config
    (setq linum-relative-current-symbol "")
    (add-hook 'prog-mode-hook 'linum-relative-mode))
#+END_SRC
** helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :diminish helm-mode
    :bind
    ("C-x C-f" . 'helm-find-files)
    ("C-x C-b" . 'helm-buffers-list)
    ("M-x" . 'helm-M-x)
    ("M-y" . 'helm-show-kill-ring)
    ("C-x b" . helm-mini)
    :config
    (defun daedreth/helm-hide-minibuffer ()
      (when (with-helm-buffer helm-echo-input-in-header-line)
        (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
          (overlay-put ov 'window (selected-window))
          (overlay-put ov 'face
                       (let ((bg-color (face-background 'default nil)))
                         `(:background ,bg-color :foreground ,bg-color)))
          (setq-local cursor-type nil))))
    (add-hook 'helm-minibuffer-set-up-hook 'daedreth/helm-hide-minibuffer)
    (setq helm-autoresize-max-height 0
          helm-autoresize-min-height 40
          helm-M-x-fuzzy-match t
          helm-buffers-fuzzy-matching t
          helm-recentf-fuzzy-match t
          helm-semantic-fuzzy-match t
          helm-imenu-fuzzy-match t
          helm-split-window-in-side-p nil
          helm-move-to-line-cycle-in-source nil
          helm-ff-search-library-in-sexp t
          helm-scroll-amount 8 
          helm-echo-input-in-header-line t)
    :init
    (helm-mode 1))

  (require 'helm-config)    
  (helm-autoresize-mode 1)
  (define-key helm-find-files-map (kbd "C-b") 'helm-find-files-up-one-level)
  (define-key helm-find-files-map (kbd "C-f") 'helm-execute-persistent-action)
#+END_SRC
*** additional packages for helm
**** access projectile from helm 
#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :bind (("M-t" . helm-projectile-find-file)
           ("M-p" . helm-projectile-switch-project))
    :config
    (helm-projectile-on))

#+END_SRC
**** wgrep
Helm documentation advices usage of wgrep, so we do...
#+BEGIN_SRC emacs-lisp
  (use-package wgrep
:defer t)
#+END_SRC
**** helm-ls-git
#+BEGIN_SRC emacs-lisp
  (use-package helm-ls-git
    :config
    (global-set-key (kbd "C-x C-d") 'helm-browse-project))
#+END_SRC
**** helm descbinds
#+BEGIN_SRC emacs-lisp
  (use-package helm-descbinds
    :config
    (helm-descbinds-mode))
#+END_SRC
**** helm-swoop and why is the default search so lame
I like me some searching, the default search is very meh. In emacs, you mostly use search to get around your buffer, much like with avy, but sometimes it doesn't hurt to search for entire words or mode, this package  makes sure this is more efficient.
#+BEGIN_SRC emacs-lisp
  (use-package helm-swoop
    :bind (("C-s" . 'helm-swoop)
	   ("C-r" . 'helm-swoop))
    )
#+END_SRC
** avy
Many times have I pondered how I can move around buffers even quicker.
I'm glad to say, that avy is precisely what I needed, and it's precisely what you need as well.
In short, as you invoke one of avy's functions, you will be prompted for a character
that you'd like to jump to in the /visible portion of the current buffer/.
Afterwards you will notice how all instances of said character have additional letter on top of them.
Pressing those letters, that are next to your desired character will move your cursor over there.
Admittedly, this sounds overly complicated and complex, but in reality takes a split second
and improves your life tremendously.

I like =M-s= for it, same as =C-s= is for moving by searching string, now =M-s= is moving by searching characters.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :bind
      ("M-s" . avy-goto-char))
#+END_SRC
* Text manipulation
Here I shall collect self-made functions that make editing text easier.

** Mark-Multiple
I can barely contain my joy. This extension allows you to quickly mark the next occurence of a region and edit them all at once. Wow!
#+BEGIN_SRC emacs-lisp
  (use-package mark-multiple
    :bind ("C-c q" . 'mark-next-like-this))
#+END_SRC

** Improved kill-word
Why on earth does a function called =kill-word= not .. kill a word.
It instead deletes characters from your cursors position to the end of the word,
let's make a quick fix and bind it properly.
#+BEGIN_SRC emacs-lisp
  (defun bk/kill-inner-word ()
    "Kills the entire word your cursor is in. Equivalent to 'ciw' in vim."
    (interactive)
    (forward-char 1)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w k") 'bk/kill-inner-word)
#+END_SRC

** Improved copy-word
And again, the same as above but we make sure to not delete the source word.
#+BEGIN_SRC emacs-lisp
  (defun bk/copy-whole-word ()
    (interactive)
    (save-excursion
      (forward-char 1)
      (backward-word)
      (kill-word 1)
      (yank)))
  (global-set-key (kbd "C-c w c") 'bk/copy-whole-word)
#+END_SRC

** Copy a line
Regardless of where your cursor is, this quickly copies a line.
#+BEGIN_SRC emacs-lisp
  (defun bk/copy-whole-line ()
    "Copies a line without regard for cursor position."
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
        (point-at-bol)
        (point-at-eol)))))
  (global-set-key (kbd "C-c l c") 'bk/copy-whole-line)
#+END_SRC

** Kill a line
And this quickly deletes a line.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l k") 'kill-whole-line)
#+END_SRC
* Minor conveniences
Emacs is at it’s best when it just does things for you, shows you the way, guides you so to speak. This can be best achieved using a number of small extensions. While on their own they might not be particularly impressive. Together they create a nice environment for you to work in.
** Visiting the configuration
Quickly edit =~/.emacs.d/config.org=
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)

#+END_SRC
** Reloading the configuration
Simply pressing =Control-c r= will reload this file, very handy. You can also manually invoke config-reload.
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)

#+END_SRC
** Subwords
Emacs treats camelCase strings as a single word by default, this changes said behaviour.
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)

#+END_SRC
** Electirc
If you write any code, you may enjoy this. Typing the first character in a set of 2, completes the second one after your cursor. Opening a bracket? It’s closed for you already. Quoting something? It’s closed for you already.
You can easily add and remove pairs yourself, have a look.
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			      (?\{ . ?\})
			      (?\[ . ?\])
			      (?\( . ?\))
			      (?\" . ?\")
			      ))
#+END_SRC
And now to enable it
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode t)

#+END_SRC
** Beacon
While changing buffers or workspaces, the first thing you do is look for your cursor. Unless you know its position, you can not move it efficiently. Every time you change buffers, the current position of your cursor will be briefly highlighted now.
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :diminish beacon-mode
    :config
    (beacon-mode 1))

#+END_SRC
** Rainbow
Mostly useful if you are into web development or game development. Every time emacs encounters a hexadecimal code that resembles a color, it will automatically highlight it in the appropriate color. This is a lot cooler than you may think.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :diminish rainbow-mode
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC
** Show parens
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)

#+END_SRC
** Rainbow delimiters
Color parentheses and other delimiters depending on their depth, useful for any language using them, especially lisp.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
      :diminish rainbow-delimiters-mode
      :init
      (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

#+END_SRC
** Expand region
A pretty simple package, takes your cursor and semantically expands the region, so words, sentences, maybe the contents of some parentheses, it's awesome.
#+BEGIN_SRC emacs-lisp
(use-package expand-region
    :bind ("C-q" . er/expand-region))

#+END_SRC
** Hungry deletion

On the list of things I like doing, deleting big whitespaces is pretty close to the bottom. Backspace or Delete will get rid of all whitespace until the next non-whitespace character is encountered. You may not like it, thus disable it if you must, but it’s pretty decent.
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :diminish hungry-delete-mode
    :config
    (global-hungry-delete-mode))

#+END_SRC
** Zapping to char
A nifty little package that kills all text between your cursor and a selected character. A lot more useful than you might think. If you wish to include the selected character in the killed region, change zzz-up-to-char into zzz-to-char.

#+BEGIN_SRC emacs-lisp
(use-package zzz-to-char
  :bind ("M-z" . zzz-up-to-char))

#+END_SRC
* Kill ring
There is a lot of customization to the kill ring, and while I have not used it much before,
I decided that it was time to change that.
** Maximum entries on the ring
#+BEGIN_SRC emacs-lisp
  (setq kill-ring-max 100)

#+END_SRC
* Git integration
Countless are the times where I opened ansi-term to use =git= on something.
These times are also something that I'd prefer stay in the past, since =magit= is
great. It's easy and intuitive to use, shows its options at a keypress and much more.
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC
* Programming
** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (use-package yasnippet-snippets
      :config
      (yas-reload-all))
    )

#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck)

#+END_SRC
** company mode
I set the delay for company mode to kick in to half a second, I also make sure 
that it starts doing its magic after typing in only 2 characters.

I prefer =C-n= and =C-p= to move around the items, so I rempa those accordingly.
#+BEGIN_SRC emacs-lisp
  (use-package company
      :config
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-length 2))

    (with-eval-after-load 'company
      (define-key company-active-map (kbd "M-n") nil)
      (define-key company-active-map (kbd "M-p") nil)
      (define-key company-active-map (kbd "C-n") #'company-select-next)
      (define-key company-active-map (kbd "C-p") #'company-select-previous)
      (define-key company-active-map (kbd "SPC") #'company-abort))
#+END_SRC

** specific languages
Be it for code or prose, completion is a must.
Each category also has additional settings.

*** python
**** yasnippet
#+BEGIN_SRC emacs-lisp
 (add-hook 'python-mode-hook 'yas-minor-mode)

#+END_SRC

**** flycheck
#+BEGIN_SRC emacs-lisp
 (add-hook 'python-mode-hook 'flycheck-mode)

#+END_SRC

**** company
#+BEGIN_SRC emacs-lisp
   (with-eval-after-load 'company
	(add-hook 'python-mode-hook 'company-mode))

    (use-package company-jedi
      :config
	(require 'company)
	(add-to-list 'company-backends 'company-jedi))

    (defun python-mode-company-init ()
      (setq-local company-backends '((company-jedi
				      company-etags
				      company-dabbrev-code))))

    (use-package company-jedi
      :config
	(require 'company)
	(add-hook 'python-mode-hook 'python-mode-company-init))

#+END_SRC

*** emacs-lisp
**** eldoc
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
#+END_SRC

**** yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
#+END_SRC

**** company
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'company-mode)

  (use-package slime
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl")
    (setq slime-contribs '(slime-fancy)))

  (use-package slime-company
    :init
      (require 'company)
      (slime-setup '(slime-fancy slime-company)))
#+END_SRC

*** bash
**** yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook 'yas-minor-mode)
#+END_SRC

**** flycheck
#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook 'flycheck-mode)

#+END_SRC

**** company
#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook 'company-mode)

  (defun shell-mode-company-init ()
    (setq-local company-backends '((company-shell
                                    company-shell-env
                                    company-etags
                                    company-dabbrev-code))))

  (use-package company-shell
    :config
      (require 'company)
      (add-hook 'shell-mode-hook 'shell-mode-company-init))
#+END_SRC

*** javascript
**** yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'js-mode-hook 'yas-minor-mode)

#+END_SRC
**** flycheck
#+BEGIN_SRC emacs-lisp
  (add-hook 'js-mode-hook 'flycheck-mode)
  (setq-default flycheck-disabled-checkers
                (append flycheck-disabled-checkers
                        '(javascript-jshint json-jsonlint)))
  (setq-default flycheck-temp-prefix ".flycheck")

  ;; use local eslint from node_modules before global
  ;; http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable
  (defun bk/use-eslint-from-node-modules ()
    (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
           (eslint (and root
                        (expand-file-name "node_modules/.bin/eslint"
                                          root))))
      (when (and eslint (file-executable-p eslint))
        (setq-local flycheck-javascript-eslint-executable eslint))))
  (add-hook 'flycheck-mode-hook #'bk/use-eslint-from-node-modules)

#+END_SRC
**** add node modules path
#+BEGIN_SRC emacs-lisp
  (use-package add-node-modules-path
    :hook (
           (typescript-mode . #'add-node-modules-path)
           (js-mode . #'add-node-modules-path)
           (js2-mode . #'add-node-modules-path)
           (rjsx-mode . #'add-node-modules-path)))
#+END_SRC
**** js2-mode
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :mode "\\.js$"
    :config
    (progn
      (add-to-list 'interpreter-mode-alist '("node" . js2-mode))

      (setq js2-basic-offset 2
            js2-bounce-indent-p t
            js2-strict-missing-semi-warning nil
            js2-concat-multiline-strings nil
            js2-include-node-externs t
            js2-skip-preprocessor-directives t
            js2-strict-inconsistent-return-warning nil)
      (setq-default js2-strict-trailing-comma-warning nil)))
#+END_SRC
**** js2-refactor
#+begin_src emacs-lisp
  (use-package js2-refactor
    :hook (js2-mode . #'js2-refactor-mode)
    :defer 1
    :init
    (js2r-add-keybindings-with-prefix "C-c m"))
#+end_src
**** prettier-js
#+BEGIN_SRC emacs-lisp
  (use-package prettier-js
    :defer 1
    :config
    (add-hook 'js2-mode-hook 'prettier-js-mode)
    (add-hook 'rjsx-mode-hook 'prettier-js-mode))

    ;; use local prettier-eslint from node_modules before global
    ;; http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable
    (defun bk/use-prettier-eslint-from-node-modules ()
      (let* ((root (locate-dominating-file
                    (or (buffer-file-name) default-directory)
                    "node_modules"))
             (prettier-eslint (and root
                          (expand-file-name "node_modules/.bin/prettier-eslint"
                                            root))))
        (when (and prettier-eslint (file-executable-p prettier-eslint))
          (setq-local prettier-js-command prettier-eslint
                      prettier-js-args "--ignore \"**/*.spec.js*.snap\""))))
    (add-hook 'prettier-js-mode-hook #'bk/use-eslint-from-node-modules)
#+END_SRC
**** json-mode
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :defer 1)

#+END_SRC
**** jsx
#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode
    :defer 1
    :mode "\\.jsx$")
#+END_SRC
**** tide
#+BEGIN_SRC emacs-lisp
    (use-package tide
      :after (js2-mode typescript-mode company flycheck)
      :hook ((typescript-mode . tide-setup)
             (js-mode . tide-setup)
             (js2-mode . tide-setup)
             (rjsx-mode . tide-setup)
             (typescript-mode . tide-hl-identifier-mode))
      :config
      ;; configure javascript-tide checker to run after your default javascript checker
      (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append))
#+END_SRC

* Remote editing
I have no need to directly edit files over SSH, but what I do need is a way to edit files as root.
Opening up nano in a terminal as root to play around with grubs default settings is a no-no, this solves that.

** Editing with sudo
Pretty self-explanatory, useful as hell if you use exwm.
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :bind
      ("s-e" . sudo-edit))
#+END_SRC
* Org
One of the absolute greatest features of emacs is called "org-mode".
This very file has been written in org-mode, a lot of other configurations are written in org-mode, same goes for
academic papers, presentations, schedules, blogposts and guides.
Org-mode is one of the most complex things ever, lets make it a bit more usable with some basic configuration.


Those are all rather self-explanatory.
** Install current stable version
This is already managed in init.el
** Common settings

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis " ")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

** Syntax highlighting for documents exported to HTML
#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC

** Line wrapping
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
	    '(lambda ()
	       (visual-line-mode 1)))
#+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c '") 'org-edit-src-code)
#+END_SRC

** Org Bullets
Makes it all look a bit nicer, I hate looking at asterisks.
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

** Easy-to-add emacs-lisp template
Hitting tab after an "<el" in an org-mode file will create a template for elisp insertion.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" . "src emacs-lisp")
               '("sh" . "src sh"))
#+END_SRC

* Golden Ration
To get the most from my notebook screen it want to concentrate on the current window. 
#+BEGIN_SRC emacs-lisp
  (use-package golden-ratio
    :defer t
    :diminish golden-ratio-mode
    :config
    (golden-ratio-mode 1)
    :init
    (setq golden-ratio-auto-scale t)
)
#+END_SRC
* Diminishing modes
Your modeline is sacred, and if you have a lot of modes enabled, as you will if you use this config,
you might end up with a lot of clutter there, the package =diminish= disables modes on the mode line but keeps
them running, it just prevents them from showing up and taking up space.

*THIS WILL BE REMOVED SOON AS USE-PACKAGE HAS THE FUNCTIONALITY BUILT IN*

Edit this list as you see fit!
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :init
    (diminish 'visual-line-mode)
    (diminish 'subword-mode)
    (diminish 'page-break-lines-mode)
    (diminish 'auto-revert-mode))
#+END_SRC
